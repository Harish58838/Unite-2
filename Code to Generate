def optimized_sort(input_list):
    return sorted(input_list)

# Test Cases
# Test your optimized function with the following lists:
# Input: [64, 25, 12, 22, 11]
# Expected Output: [11, 12, 22, 25, 64]
assert optimized_sort([64, 25, 12, 22, 11]) == [11, 12, 22, 25, 64]

# Input: [29, 10, 14, 37, 13]
# Expected Output: [10, 13, 14, 29, 37]
assert optimized_sort([29, 10, 14, 37, 13]) == [10, 13, 14, 29, 37]

# Input: [3, 5, 2, 1, 4]
# Expected Output: [1, 2, 3, 4, 5]
assert optimized_sort([3, 5, 2, 1, 4]) == [1, 2, 3, 4, 5]

# Input: [1, 2, 3, 4, 5] (Already sorted list)
# Expected Output: [1, 2, 3, 4, 5]
assert optimized_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Input: [5, 4, 3, 2, 1] (Reverse sorted list)
# Expected Output: [1, 2, 3, 4, 5]
assert optimized_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
